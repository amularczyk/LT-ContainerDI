\{document}
Cześć. Nazywam się Adrian Mularczyk i dzisiaj opowiem wam trochę o kontenerach wstrzykiwania zależności.

--
Skąd w ogóle taki temat? Otóż zauważyłem, że obecnie prawie każdy używa kontenerów wstrzykiwania zależności, ale wciąż bardzo niewiele osób wie jak one działają i te osoby czasami boją się ich używać.

--
Na początek czym w ogóle jest to wstrzykiwanie zależności? Pokaże to na przykładzie.

--
Założmy że mamy klasę 'Foo' i ma ona metodę 'DoSomeWork'. W tej metodzie potrzebujemy obiektu klasy 'Bar', aby wywołać z niego metodę 'DoSomething'.

--
Bez wstrzykiwania zależności musielimy sami stworzyć obiekt klasy 'Bar' w tej metodzie.

--
Stosując wstrzykiwaniu zależności, obiekt klasy 'Bar' zostanie nam dostarczony z zewnątrz - np. metoda DoSomeWork może go przyjąć jako parametr.

--
Może się zdarzyć też tak, że nie chcemy, aby ta metoda przyjmowała obiekt klasy Bar jako parametr.
Wtedy możemy przenieść ten parametr z metody do konstruktora.
Teraz gdy ktoś będzie tworzył obiekt klasy Foo, będzie wiedział, że potrzebuje on do działania obiektu klasy Bar.

--
I tym właście jest wstrzykiwanie zależności - nie tworzymy obiektów sami, tylko zostaje one do naszej klasy/metody wstrzyknięte.

--
Jeśli wiemy czym jest wstrzykiwanie zależności, to zastanówmmy się jakie są sposoby wstrzykiwania zależności.

--
Wstrzykinięcie może odbywać się na kilka sposobów:
- Wstrzykinięcie przez konstruktor,
- Wstrzykinięcie przez metodę,
- Wstrzykinięcie przez właściwość.

--
Najczęściej stosowanym i przez wielu uważanym za jedynym właściwym jest wstrzykinięcie przez konstruktor.

--
Skoro wiemy czym jest wstrzykiwanie zależności, to czym jest ten konterner wstrzykiwania zależności?

--
Jest to obiekt, który dostarcza nam następujące operacje:
- Register, czyli metodę dzięki której możemy zarejestrować jakiś typ w kontenerze,
- Resolve, czyli metodę która umożliwa nam zwrócenie obiektu jakiegoś typu.

--
Typy, mogą być zarejestrowane z różną polityką czasu życia:
- Transient, czyli zawsze otrzymamy nowy obiekt,
- Singleton, czyli obiekt jest tworzony raz, a potem za każdym razem otrzymamy ten sam obiekt,
- Scoped, czyli dla danego zakresu otrzymamy ten sam obiekt, a dla dwóch różnych zakresów, są to różne obiekty. Takimi zakresami może być np. wątek, httpRequest albo coś, co sami uważamy za osobny zakres.
- FactoryMethod, czyli definiujemy funkcję, która ma na zwrócić obiekt oczekiwanego typu.

--
A jak taki kontener wygląda pod spodem?
Pod spodem mamy Listę, w której kontener zapisuje sobie zarejestrowane typy.

--
Metoda Register dodaje kolejny typ do tej listy.

--
Metoda Resolve sprawdza czy dany typ jest na liście i jeśli tak, to tworzy obiekt danego typu i go zwraca.

--
Ok, ale wspomnieliśmy o tym, że mamy kilka rodzajów rejestracji, więc jak to się ma do tej naszej listy typów?
Otóż taka Lista nie zawiera jedynie informacji o typie, ale zawiera obiekt, które poza typem przechowuje jeszcze kilka informacji.

--
Takimi informacjami mogą być:
- typ wejściowy,
- typ wyjściowy,
- rodzaj rejestracji,
- obiekt danego typu, który będzie miał wartość dla rejestracji typu Singleton,
- może to być również lista zawierająca parę zakres i obiekt, tak, aby dla danego zakresu zwracać ten sam obiekt, a dla dwóch różnych zakresów różny obiekt.

--
W związku z tym metoda Register tak na prawdę wygląda trochę inaczej, bo jako parametr przyjmuje typ wejściowy oraz typ wyjściowy, i te informację są dodawane do listy typów.

--
A tak na prawdę, to nie to jest metoda Register, tylko Register z określoną polityką czasu życia, czyli np. RegisterTransient i w naszym obiekcie RegisteredType zapisujemy jeszcze rodzaj rejestracji.

--
Metoda Resolve nie ulega zmianie. Jedyne czego nie omówiliśmy to jak może wyglądać metoda CreateObjectOfType, ale to mógłby być temat na osobną prezentację.

--
I to by było na tyle z mojego krótkiego wystąpienia na temat kontenerów wstrzykiwania zależności. Mam nadzieję, że dzięki tej prezentacji dowiedzieliścię się trochę więcej o tym jak takie kontenery działają i chętniej będziecie ich używać.

--
Dziękuję

--
Czy są jakieś pytania?
