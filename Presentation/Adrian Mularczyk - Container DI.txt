\{document}
Cześć. Nazywam się Adrian Mularczyk i dzisiaj opowiem wam trochę o kontenerach wstrzykiwania zależności.

--
Skąd w ogóle taki temat? Otóż zauważyłem, że obecnie prawie każdy używa kontenerów wstrzykiwania zależności, ale wciąż bardzo niewiele osób wie jak one działają i te osoby czasami boją się ich używać.

--
Na początek czym w ogóle jest to wstrzykiwanie zależności? Pokaże to na przykładzie.

--
Założmy że mamy klasę 'Foo' i ma ona metodę 'DoSomeWork'. W tej metodzie potrzebuje obiektu klasy 'Bar', aby wywołać z niej metodę 'DoSomething'.

--
Bez wstrzykiwania zależności musielibyśmy sami stworzyć obiekt klasy 'Bar' w tej metodzie.

--
Stosując wstrzykiwaniu zależności, obiekt klasy 'Bar' zostanie nam dostarczony z zewnątrz - np. metoda DoSomeWork może go przyjąć jako parametr.

--
Może się zdarzyć też tak, że nie chcemy, aby ta metoda przyjmowała obiekt klasy Bar jako parametr.
Wtedy możemy przenieść ten parametr z metody do konstruktora.
Teraz gdy ktoś będzie tworzył obiekt klasy Foo, będzie wiedział, że potrzebuje on do działania obiektu klasy Bar.

--
I tym właście jest wstrzykiwanie zależności - nie tworzymy obiektów sami, tylko zostaje one do naszej klasy/metody wstrzyknięte.

--
Jeśli wiemy czym jest wstrzykiwanie zależności, to zastanówmmy się jakie są sposoby wsrzykiwania zależności.

--
Wstrzykinięcie może odbywać się na kilka sposobów:
- Wstrzykinięcie przez konstruktor,
- Wstrzykinięcie przez metodę,
- Wstrzykinięcie przez właściwość.

--
Najczęściej stosowanym i przez wielu uważanym za jedynym właściwym jest wstrzykinięcie przez konstruktor.

--
Skoro wiemy czym jest wstrzykiwanie zależności, to czym jest ten konterner wstrzykiwania zależńości?

--
Jest to obiekt, który dostarcza nam następujące operacje:
- Register, czyli metodę dzięki której możemy zarejestrować jakiś typ w kontenerze,
- Resolve, czyli metodę która umożliwa nam zwrócenie obiektu jakiegoś typu - w dużym uproszczeniu - abyśmy mogli zwrócić obiekt jakiegoś typu, musimy najpierw ten typ zarejestrować.

--
Typy, mogą być zarejestrowane z różną polityką czasu życia:
- Transient, czyli zawsze otrzymamy nowy obiekt,
- Singleton, czyli obiekt jest tworzony raz, a potem za każdym razem otrzymamy ten sam obiekt,
- Scoped, czyli dla danego zakresu otrzymamy ten sam obiekt, a dla dwóch różnych zakresów, są to różne obiekty. Takimi zakresami może być np. wątek, httpRequest albo coś, co sami uważamy za osobny zakres.
- FactoryMethod, czyli definiujemy funkcję, która ma na zwrócić obiekt oczekiwanego typu.

--
A jak taki kontener wygląda pod spodem?
Pod spodem mamy Listę, w której kontener zapisuje sobie zarejestrowane typy.

--
Metoda Register dodaje kolejny typ do tej listy.

--
Metoda Resolve sprawdza czy dany typ jest na liście i jeśli tak, to tworzy obiekt danego typu i go zwraca.

--
I to by było na tyle z mojego krótkiego wystąpienia na temat kontenerów wstrzykiwania zależności. Mam nadzieję, że dzięki tej prezentacji dowiedzieliścię się trochę więcej o tym jak takie kontenery działają. Jeśli ktoś byłby zainteresowany zaawansowanymi zagadnieniami z tego tematu, to proszę dać znać, a postaram się przygotować kolejną prezentację.

--
Czy są jakieś pytania?
